name: CI with Gradle

on:
  push:
    branches: [ "release_222-241" ]
  pull_request:
    branches: [ "release_222-241" ]

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - ide_type: 'IU'
            ide_version: '2022.2'
            py_version: '222.3345.118'
            go_version: '222.3345.118'
          - ide_type: 'IU'
            ide_version: '2023.1'
            py_version: '231.8109.175'
            go_version: '231.8109.175'
          - ide_type: 'IU'
            ide_version: '2023.2'
            py_version: '232.8660.185'
            go_version: '232.8660.142'
          - ide_type: 'IU'
            ide_version: '2023.3'
            py_version: '233.11799.196'
            go_version: '233.11799.196'
          - ide_type: 'IU'
            ide_version: '2024.1'
            py_version: '241.14494.158'
            go_version: '241.14494.158'

    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Set IDE Name and Version
        run: |
          echo "INTELLIJ_TYPE=${{ matrix.ide_type }}" >> $GITHUB_ENV
          echo "INTELLIJ_VERSION=${{ matrix.ide_version }}" >> $GITHUB_ENV
          echo "PY_VERSION=${{ matrix.py_version }}" >> $GITHUB_ENV
          echo "GO_VERSION=${{ matrix.go_version }}" >> $GITHUB_ENV
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Verify Plugin
      - name: Run Plugin Verification tasks
        run: ./gradlew verifyPlugin

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier